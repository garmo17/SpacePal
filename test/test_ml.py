from backend.api.ml.categorization import categorize_product_by_description, model, category_labels
from backend.api.db.database import products_collection

async def test_categorize_product_by_description_with_more_options():
    description = "Silla de madera r칰stica para terraza exterior, ideal para relajarse en el jard칤n"

    # A침adimos m치s espacios de prueba
    space_names = ["terraza", "jard칤n", "comedor", "sal칩n", "oficina", "dormitorio"]
    space_labels = [
        "terraza: espacio exterior para relajarse",
        "jard칤n: zona verde al aire libre",
        "comedor: lugar para comer con familia y amigos",
        "sal칩n: zona com칰n para reuniones y descanso",
        "oficina: espacio para trabajo y productividad",
        "dormitorio: zona para descansar y dormir"
    ]

    # A침adimos m치s estilos de prueba
    style_names = ["r칰stico", "n칩rdico", "minimalista", "industrial", "bohemio", "cl치sico"]
    style_labels = [
        "r칰stico: madera, naturaleza y calidez",
        "n칩rdico: l칤neas limpias y tonos claros",
        "minimalista: simplicidad y orden",
        "industrial: metal y hormig칩n con toques urbanos",
        "bohemio: mezcla de texturas y colores",
        "cl치sico: elegancia y tradici칩n"
    ]

    # Calculamos embeddings
    category_embeddings = model.encode(category_labels, convert_to_tensor=True)
    space_embeddings = model.encode(space_labels, convert_to_tensor=True)
    style_embeddings = model.encode(style_labels, convert_to_tensor=True)

    # Llamamos a la funci칩n
    category, spaces, styles = await categorize_product_by_description(
        description,
        category_embeddings,
        space_embeddings,
        style_embeddings,
        space_names,
        style_names
    )


    print("游댍 Categor칤a:", category)
    print("游늸 Espacios (Top 3):", spaces)
    print("游꿛 Estilos (Top 3):", styles)

    assert isinstance(category, str)
    assert isinstance(spaces, list) and len(spaces) == 3
    assert isinstance(styles, list) and len(styles) == 3
